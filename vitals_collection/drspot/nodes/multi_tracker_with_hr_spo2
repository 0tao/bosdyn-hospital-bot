#!/usr/bin/env python

# Copyright 2020 Boston Dynamics Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import rospy
from std_srvs.srv import SetBool, SetBoolResponse
from std_msgs.msg import Bool

from drspot.vitals.heart_rate_spo2 import HeartRate
from drspot.vitals.multichrome_face_tracker import FaceDetectorTracker, CalibratedCameraTrack
from drspot.vitals.multichrome_face_tracker import ENABLE_TOPIC
from drspot.vitals.multichrome_face_tracker import RED_IMAGE_TOPIC, RED_TRACKING_STATUS_TOPIC, RED_CROPPED_IMAGE_TOPIC, RED_REGION_IN_IMAGE_TOPIC, RED_OFFSET_FRAC_OF_FACE_HEIGHT
from drspot.vitals.multichrome_face_tracker import NIR_IMAGE_TOPIC, NIR_TRACKING_STATUS_TOPIC, NIR_CROPPED_IMAGE_TOPIC, NIR_REGION_IN_IMAGE_TOPIC, NIR_OFFSET_FRAC_OF_FACE_HEIGHT
from drspot.vitals.multichrome_face_tracker import NARROW_NIR_IMAGE_TOPIC, NARROW_NIR_TRACKING_STATUS_TOPIC, NARROW_NIR_CROPPED_IMAGE_TOPIC, NARROW_NIR_REGION_IN_IMAGE_TOPIC, NARROW_NIR_X_OFFSET_FRAC_OF_FACE_HEIGHT, NARROW_NIR_Y_OFFSET_FRAC_OF_FACE_HEIGHT

# Use the bigger buffer and queue sizes from multichrome_face_tracker, not heart_rate_spo2
from drspot.vitals.multichrome_face_tracker import IMG_QUEUE_SIZE, IMG_BUF_SIZE

if __name__ == '__main__':
    rospy.init_node('multi_tracker_with_hr_spo2')
    hr = HeartRate(rospy.get_name())
    fdt = FaceDetectorTracker('red_' + rospy.get_name())
    nir_cct = CalibratedCameraTrack('nir_' + rospy.get_name(), fdt,
                                    NIR_IMAGE_TOPIC,
                                    NIR_TRACKING_STATUS_TOPIC,
                                    NIR_CROPPED_IMAGE_TOPIC,
                                    NIR_REGION_IN_IMAGE_TOPIC,
                                    0,
                                    NIR_OFFSET_FRAC_OF_FACE_HEIGHT)
    narrow_nir_cct = CalibratedCameraTrack('narrow_nir_' + rospy.get_name(), fdt,
                                           NARROW_NIR_IMAGE_TOPIC,
                                           NARROW_NIR_TRACKING_STATUS_TOPIC,
                                           NARROW_NIR_CROPPED_IMAGE_TOPIC,
                                           NARROW_NIR_REGION_IN_IMAGE_TOPIC,
                                           NARROW_NIR_X_OFFSET_FRAC_OF_FACE_HEIGHT,
                                           NARROW_NIR_Y_OFFSET_FRAC_OF_FACE_HEIGHT,
                                           rot180=True)

    def handle_enable(req):
        rospy.loginfo('Setting {} enabled to {}'.format(rospy.get_name(),
                                                        req.data))
        if not req.data:
            det_msg = Bool()
            det_msg.data = False
            fdt.tracking_status_pub.publish(det_msg)
            nir_cct.tracking_status_pub.publish(det_msg)
            narrow_nir_cct.tracking_status_pub.publish(det_msg)

        fdt.enabled = req.data
        nir_cct.enabled = req.data
        narrow_nir_cct.enabled = req.data
        return SetBoolResponse(True, '')

    s = rospy.Service(ENABLE_TOPIC, SetBool, handle_enable)
    rospy.spin()
