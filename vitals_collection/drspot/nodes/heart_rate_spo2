#!/usr/bin/env python

# Copyright 2020 Boston Dynamics Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DEBUG_PLOT = False
DEBUG_IMAGE = False
if DEBUG_PLOT:
    import matplotlib.pyplot as plt
if DEBUG_IMAGE:
    import cv2

import numpy as np
import threading
import cv2

import rospy
import message_filters
from sensor_msgs.msg import Image
from geometry_msgs.msg import PolygonStamped
from std_msgs.msg import Float32MultiArray, Float32, Bool
from cv_bridge import CvBridge

RED_IMAGE_TOPIC = 'mono_red_cropped'
CONSTANT_IMAGE_TOPIC = 'mono_constant_cropped'

MSMT_TOPIC = 'full_heart_rate'
DATA_TOPIC = 'full_data_heart_rate'
TRACKING_STATUS_TOPIC = 'mono_red_tracking_status'
HELPER_TIMER_PERIOD_SEC = 1
FULL_MSMT_PERIOD_SEC = 10
OK_FRAC_MSMT = 0.7
MAX_DROPOUT_BEFORE_RESET_SEC = 0.5

ALIGNMENT_ITERATIONS = 10000
# Specify the stopping threshold as a change in the correlation coefficient.
ALIGNMENT_TERMINATION = 1e-10
DETECT_TRACK_SCALE_FACTOR = 1/16.0

# Minimum of 40 beats per minute.
MIN_HEART_HZ = 40.0 / 60.0
# Maximum of 120 beats per minute.
MAX_HEART_HZ = 120.0 / 60.0

class HeartRate(object):
    def image_callback(self, red_image_data, constant_image_data):
        t = red_image_data.header.stamp.to_sec()

        with self.lock:
            if self.tlast is None:
                self.tlast = t
                return

            # Detect backward jumps in time in replay.
            if self.tlast > t:
                self.clear_msmt_state()
                self.tlast = t
                rospy.logwarn_throttle(1, '{}: Backward jump in time'.format(self.name))
                return

            # Detect skips in data.
            if t - self.tlast > MAX_DROPOUT_BEFORE_RESET_SEC:
                rospy.logwarn_throttle(1, '{}: Dropped samples for {} sec'.format(self.name, t - self.tlast))
                self.clear_msmt_state()
                self.tlast = t
                return

            if self.delta is None:
                self.delta = t - self.tlast
                return

            self.delta = self.delta_alpha * (t - self.tlast) + (1 - self.delta_alpha) * self.delta
            self.tlast = t
        # End locked region.

        red_image = self.bridge.imgmsg_to_cv2(red_image_data,
                                              desired_encoding='passthrough')
        constant_image = self.bridge.imgmsg_to_cv2(constant_image_data,
                                                   desired_encoding='passthrough')

        with self.lock:
            if len(self.red_msmt_buffer) == 0: self.ti = t
            self.red_msmt_buffer.append(red_image)
            self.constant_msmt_buffer.append(constant_image)
            self.tf = t
        # End locked region.

    def tracking_status_callback(self, data):
        with self.lock:
            if not self.roi_valid or not data.data:
                # Clear the measurement buffer unless we are valid, staying valid.
                self.clear_msmt_state()
            self.roi_valid = data.data

    def msmt_helper_callback(self, event):
        with self.lock:
            if not self.roi_valid:
                rospy.logwarn_throttle(1, '{}: No valid ROI received.'.format(self.name))
                self.clear_msmt_state()
                return

            delta = self.delta

            ti = self.ti
            tf = self.tf
            red_data = self.red_msmt_buffer
            constant_data = self.constant_msmt_buffer
            do_it = ti is not None and tf is not None and tf - ti >= FULL_MSMT_PERIOD_SEC
            if do_it:
                self.red_msmt_buffer = []
                self.constant_msmt_buffer = []
        # End locked region.

        if do_it:
            # Spawn a thread to do the measurement.
            #t = threading.Thread(target=self.msmt_callback, name='full_' + self.name,
            #                     args=(event, ti, tf, red_data, constant_data, delta))
            #t.start()
            self.msmt_callback(event, ti, tf, red_data, constant_data, delta)

            with self.lock:
                self.red_msmt_buffer = []
                self.constant_msmt_buffer = []

    def msmt_callback(self, event, ti, tf, red_data, constant_data, delta):
        data_all = ((red_data, self.red_data_ax, self.red_amp_ax),
                    (constant_data, self.constant_data_ax, self.constant_amp_ax))

        for data, data_ax, amp_ax in data_all:
            msmt_n = len(data)

            if delta is None or delta < 1e-3 or msmt_n < OK_FRAC_MSMT * FULL_MSMT_PERIOD_SEC / delta:
                rospy.loginfo_throttle(1, '{}: not enough samples {}'.format(self.name, msmt_n))
                return

            frame_data = np.zeros(msmt_n)
            warp_matrices = []

            (rows, cols) = data[0].shape
            r = int(rows * DETECT_TRACK_SCALE_FACTOR)
            c = int(cols * DETECT_TRACK_SCALE_FACTOR)
            im0 = cv2.resize(data[0], (c, r), interpolation=cv2.INTER_AREA)

            # xmin, ymin, xmax, ymax in unscaled image
            xmin = 0; ymin = 0; xmax = cols-1; ymax = rows-1

            for i in range(1, msmt_n):
                (rows, cols) = data[i].shape
                r = int(rows * DETECT_TRACK_SCALE_FACTOR)
                c = int(cols * DETECT_TRACK_SCALE_FACTOR)
                im = cv2.resize(data[i], (c, r), interpolation=cv2.INTER_AREA)

                warp_matrix = np.eye(2, 3, dtype=np.float32)
                criteria = (cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, ALIGNMENT_ITERATIONS,
                            ALIGNMENT_TERMINATION)
                try:
                    (cc, warp_matrix) = cv2.findTransformECC(im0, im, warp_matrix,
                                                             cv2.MOTION_TRANSLATION,
                                                             criteria, None, 1)
                except:
                    rospy.logwarn_throttle(1, '{}: failed patch alignment in {}:{}, idx {}'.format(
                        self.name, ti, tf, i))
                else:
                    # Convert the corners of the ith image to equivalent locations in the 0th image.
                    # top left
                    # top right
                    # bottom left
                    # bottom right
                    # (x, y, 1)
                    tl = np.dot(warp_matrix, np.array([0,      0,      1.0]))
                    tr = np.dot(warp_matrix, np.array([cols-1, 0,      1.0]))
                    bl = np.dot(warp_matrix, np.array([0,      rows-1, 1.0]))
                    br = np.dot(warp_matrix, np.array([cols-1, rows-1, 1.0]))
                    # left x bound
                    if tl[0] > xmin:
                        xmin = int(tl[0])
                    # right x bound
                    if tr[0] < xmax:
                        xmax = int(tr[0])
                    # top y bound
                    if tl[1] > ymin:
                        ymin = int(tl[1])
                    # bottom y bound
                    if br[1] < ymax:
                        ymax = int(br[1])

                # Keep the indexing consistent even if alignment failed.
                warp_matrices.append(warp_matrix)

            w = xmax - xmin
            h = ymax - ymin
            xmin = int(xmin + 0.3 * w)
            xmax = int(xmax - 0.3 * w)
            ymin = int(ymin + 0.3 * h)
            ymax = int(ymax - 0.3 * h)

            if DEBUG_IMAGE:
                cv_debug = data[0]
                #cv2.rectangle(cv_debug, (xmin, ymin), (xmax, ymax), (255,255,255), 2)
                cv2.imshow("First image", cv_debug[ymin:ymax, xmin:xmax])
                cv2.waitKey(1)

            frame_data[0] = np.mean(data[0][ymin:ymax, xmin:xmax])
            for i in range(1, msmt_n):
                # Use warpAffine for Translation, Euclidean and Affine
                sz = data[0].shape
                # The function warpAffine transforms the source image using the specified matrix:
                # dst(x,y) = src(M_11 x + M_12 y + M_13, M_21 x + M_22 y + M_23)
                # when the flag WARP_INVERSE_MAP is set
                im_aligned = cv2.warpAffine(data[i], warp_matrices[i-1], (sz[1], sz[0]),
                                            flags=cv2.INTER_LINEAR + cv2.WARP_INVERSE_MAP)

                frame_data[i] = np.mean(im_aligned[ymin:ymax, xmin:xmax])

                if DEBUG_IMAGE:
                    #cv2.rectangle(im_aligned, (xmin, ymin), (xmax, ymax), (255,255,255), 2)
                    cv2.imshow("Aligned Image 2", im_aligned[ymin:ymax, xmin:xmax])
                    cv2.waitKey(1)

            msg = Float32MultiArray()
            msg.data = frame_data
            self.data_pub.publish(msg)

            sp = np.fft.fft(frame_data)
            freq = np.fft.fftfreq(sp.shape[-1], d=delta)
            # Find the range of real frequency bins that we are interested in.
            nreal = frame_data.shape[0]
            fminind = int(MIN_HEART_HZ * nreal * delta) + 1
            fmaxind = int(MAX_HEART_HZ * nreal * delta)

            amp = np.abs(sp)[fminind:fmaxind]
            if DEBUG_PLOT:
                data_ax.cla()
                data_ax.plot(frame_data)
                amp_ax.cla()
                amp_ax.plot(freq[fminind:fmaxind] * 60.0, amp)
            try:
                beats = freq[amp.argmax() + fminind] * 60.0
            except ValueError as e:
                rospy.logwarn('{}: {}'.format(self.name, str(e)))
                beats = -1.0
            else:
                msg = Float32()
                msg.data = beats
                self.msmt_pub.publish(msg)

            rospy.loginfo('{}: {:.1f} beats / min; nsamp: {}; ti: {:.1f}; tf: {:.1f}; delta: {:.4f}'.format(
                self.name, beats, nreal, ti, tf, (tf - ti) / nreal))

    def clear_msmt_state(self):
        rospy.logwarn_throttle(1, '{}: Resetting'.format(self.name))

        # Region of Interest
        self.roi_valid = False

        self.ti = None
        self.tf = None

        self.tlast = None
        self.delta = None

    def __init__(self, name):
        self.name = name

        self.lock = threading.Lock()

        # Measurement buffers
        self.red_msmt_buffer = []
        self.constant_msmt_buffer = []

        self.clear_msmt_state()

        # Software time delta calculation
        self.delta_alpha = 0.8

        self.bridge = CvBridge()

        self.red_data_ax = None
        self.red_amp_ax = None
        self.constant_data_ax = None
        self.constant_amp_ax = None
        if DEBUG_PLOT:
            self.fig = plt.figure()
            self.red_data_ax = self.fig.add_subplot(2, 3, 1)
            self.red_amp_ax = self.fig.add_subplot(2, 3, 2)
            self.constant_data_ax = self.fig.add_subplot(2, 3, 4)
            self.constant_amp_ax = self.fig.add_subplot(2, 3, 5)

        self.msmt_pub = rospy.Publisher(MSMT_TOPIC, Float32, queue_size=10)
        self.data_pub = rospy.Publisher(DATA_TOPIC, Float32MultiArray, queue_size=10)

        self.red_image_sub = message_filters.Subscriber(RED_IMAGE_TOPIC, Image)
        self.constant_image_sub = message_filters.Subscriber(CONSTANT_IMAGE_TOPIC, Image)

        self.approx_image_sync = message_filters.ApproximateTimeSynchronizer([self.red_image_sub,
                                                                              self.constant_image_sub],
                                                                             10, 0.1)
        self.approx_image_sync.registerCallback(self.image_callback)

        self.tracking_status_sub = rospy.Subscriber(TRACKING_STATUS_TOPIC, Bool,
                                                    self.tracking_status_callback, queue_size=1)

        self.msmt_helper_timer = rospy.Timer(rospy.Duration(HELPER_TIMER_PERIOD_SEC),
                                             self.msmt_helper_callback)

if __name__ == '__main__':
    rospy.init_node('heart_rate')
    hr = HeartRate(rospy.get_name())
    if DEBUG_PLOT:
        while not rospy.is_shutdown():
            plt.show(block=False)
            plt.pause(0.5)
    else:
        rospy.spin()
